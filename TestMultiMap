// testconsole.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"
#include <stdlib.h>
#include <map>
#include <iostream>

void TestMultiMap();

int _tmain(int argc, _TCHAR* argv[])
{
	TestMultiMap();

//	getchar();
	system("pause");
	return 0;
}

//------------------------------------------------------------------------------
/**
	* 2014-09-17 : sbyang : multimap test
	- multimap 은 여러개의 동일한 key의 추가가 가능하다
	- 추가한 key 항목들은 추가한 순서대로 같은 key로 정렬되어 관리된다.
	- key별 그룹은 오름차순으로 정렬되어 관리된다.
	- equal_range는 lower_bound 와 upper_bound 의 결과가 반환 되며
	해당 하는 key가 없으면 end() 값으로 반환된다.

	* 2014-10-27 : sbyang
	- multimap 상에 동일한 key값에 대해 추가한 순서대로 정렬 순서를 보장한다.
*/
void TestMultiMap()
{
	std::multimap<int, int> testmap;
	testmap.insert(std::pair<int,int>(0, 1));
	testmap.insert(std::pair<int,int>(0, 2));

	testmap.insert(std::pair<int,int>(1, 2));

	testmap.insert(std::pair<int,int>(0, 3));

	testmap.insert(std::pair<int,int>(1, 1));


	testmap.insert(std::pair<int,int>(2, 1));
	testmap.insert(std::pair<int,int>(2, 2));

	testmap.insert(std::pair<int,int>(1, 3));

	testmap.insert(std::pair<int,int>(2, 3));

	auto find = testmap.find(2);
	std::cout << find->first << ", " << find->second << std::endl;

	auto begin = testmap.begin();
	auto end = testmap.end();

	auto range = testmap.equal_range(3);
	std::cout << range.first->first << ", " << range.first->second << std::endl;
	std::cout << range.second->first << ", " << range.second->second << std::endl;
}
